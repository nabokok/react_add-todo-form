{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","services/preparedTodos.ts","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","cn","TodoList","todos","map","App","useState","setTitle","setUserId","isUserError","setIsUserError","isTitleError","setIsTitleError","todosFromServer","setTodos","preparedTodos","usersFromServer","find","preperedTodos","action","method","onSubmit","event","preventDefault","trim","Math","max","htmlFor","type","placeholder","value","onChange","e","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f9c8e53.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n      key={id}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} data-id={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { preperedTodos } from './services/preparedTodos';\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [isUserError, setIsUserError] = useState(false);\n  const [isTitleError, setIsTitleError] = useState(false);\n  const [todos, setTodos] = useState(todosFromServer);\n  const preparedTodos: Todo[] = preperedTodos(todos);\n\n  const resetFormFileds = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const getTodo = () => {\n    const todoId = Math.max(...todos.map(({ id }) => id)) + 1;\n\n    return {\n      id: todoId,\n      title,\n      completed: false,\n      userId,\n    };\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setIsTitleError(true);\n    }\n\n    if (!userId) {\n      setIsUserError(true);\n    }\n\n    if (title.trim() && userId) {\n      setTodos([\n        ...todos,\n        getTodo(),\n      ]);\n\n      resetFormFileds();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(e) => {\n              setTitle(e.target.value);\n              setIsTitleError(false);\n            }}\n          />\n          {isTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            id=\"user\"\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={(e) => {\n              setUserId(+e.target.value);\n              setIsUserError(false);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(({ name, id }) => (\n              <option value={id} key={id}>{name}</option>\n            ))}\n          </select>\n          {isUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={preparedTodos} />\n    </div>\n  );\n};\n","import usersFromServer from '../api/users';\nimport { Todo } from '../types/Todo';\n\nexport function preperedTodos(todos: Todo[]): Todo[] {\n  return todos.map(todo => {\n    const user = usersFromServer.find(({ id }) => id === todo.userId);\n\n    return {\n      ...todo,\n      user,\n    };\n  });\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}